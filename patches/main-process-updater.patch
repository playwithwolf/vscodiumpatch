diff --git a/src/vs/code/electron-main/main.ts b/src/vs/code/electron-main/main.ts
index 1234567..abcdefg 100644
--- a/src/vs/code/electron-main/main.ts
+++ b/src/vs/code/electron-main/main.ts
@@ -1,6 +1,9 @@
 /*---------------------------------------------------------------------------------------------
  *  Copyright (c) Microsoft Corporation. All rights reserved.
  *  Licensed under the MIT License. See License.txt in the project root for license information.
  *--------------------------------------------------------------------------------------------*/
+
+import { autoUpdater } from 'electron-updater';
+import * as log from 'electron-log';
 
 import { app, BrowserWindow, systemPreferences, shell, Event, contentTracing, protocol, webContents, crashReporter } from 'electron';
 import { IProcessEnvironment, isWindows, isMacintosh, isLinux } from 'vs/base/common/platform';
@@ -45,6 +48,8 @@ class CodeMain {
 		this.startup();
 	}
 
+	private setupAutoUpdater(): void {
+		// 配置日志
+		autoUpdater.logger = log;
+		(autoUpdater.logger as any).transports.file.level = 'info';
+
+		// 设置更新服务器地址
+		autoUpdater.setFeedURL({
+			provider: 'generic',
+			url: process.env.UPDATE_SERVER_URL || 'http://localhost:3000'
+		});
+
+		// 监听更新事件
+		autoUpdater.on('checking-for-update', () => {
+			log.info('正在检查更新...');
+		});
+
+		autoUpdater.on('update-available', (info) => {
+			log.info('发现新版本:', info.version);
+		});
+
+		autoUpdater.on('update-not-available', (info) => {
+			log.info('当前已是最新版本:', info.version);
+		});
+
+		autoUpdater.on('error', (err) => {
+			log.error('更新检查失败:', err);
+		});
+
+		autoUpdater.on('download-progress', (progressObj) => {
+			let log_message = "下载速度: " + progressObj.bytesPerSecond;
+			log_message = log_message + ' - 已下载 ' + progressObj.percent + '%';
+			log_message = log_message + ' (' + progressObj.transferred + "/" + progressObj.total + ')';
+			log.info(log_message);
+		});
+
+		autoUpdater.on('update-downloaded', (info) => {
+			log.info('更新下载完成，准备安装:', info.version);
+			// 可以在这里显示通知或对话框
+			// autoUpdater.quitAndInstall();
+		});
+
+		// 启动时检查更新
+		setTimeout(() => {
+			autoUpdater.checkForUpdatesAndNotify();
+		}, 3000); // 延迟3秒检查，确保应用完全启动
+	}
+
 	private async startup(): Promise<void> {
 		this.logService.debug('Starting VS Code');
 		this.logService.debug(`from: ${this.environmentMainService.appRoot}`);
@@ -89,6 +134,9 @@ class CodeMain {
 		// Lifecycle
 		this.lifecycleMainService.ready();
 
+		// 初始化自动更新
+		this.setupAutoUpdater();
+
 		// Let the windows manager open the initial window
 		this.windowsMainService.open({
 			context: OpenContext.START,